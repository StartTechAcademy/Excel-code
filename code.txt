Option Explicit




'=====================================================
' GET YOUR API KEY: https://openai.com/api/
Const API_KEY As String = "My API"
'=====================================================


' Constants for API endpoint and request properties
Const API_ENDPOINT As String = "https://api.openai.com/v1/completions"
Const MODEL As String = "text-davinci-003"
Const MAX_TOKENS As String = "1024"
Const TEMPERATURE As String = "0.5"


Dim previousPrompt As String
Dim outputCell As Range
Dim regenerateButtonAdded As Boolean


Sub OpenAI_Completion()
    ' Check if API key is available
    If API_KEY = "<API_KEY>" Then
        MsgBox "Please input a valid API key. You can get one from https://openai.com/api/", vbCritical, "No API Key Found"
        Exit Sub
    End If


    ' Get the prompt
    Dim prompt As String
    Dim cell As Range
    Dim selectedRange As Range
    Set selectedRange = Selection


    For Each cell In selectedRange
        prompt = prompt & cell.Value & " "
    Next cell


    ' Check if there is anything in the selected cell
    If Trim(prompt) = "" Then
        MsgBox "Please enter some text in the selected cell before executing the macro", vbCritical, "Empty Input"
        Exit Sub
    End If


    ' Check if the prompt has changed
    If prompt <> previousPrompt Then
        ' Send request to OpenAI API
        Dim httpRequest As Object
        Set httpRequest = CreateObject("MSXML2.XMLHTTP")


        Dim requestBody As String
        requestBody = "{" & _
                      """model"": """ & MODEL & """," & _
                      """prompt"": """ & prompt & """," & _
                      """max_tokens"": " & MAX_TOKENS & "," & _
                      """temperature"": " & TEMPERATURE & _
                      "}"


        With httpRequest
            .Open "POST", API_ENDPOINT, False
            .SetRequestHeader "Content-Type", "application/json"
            .SetRequestHeader "Authorization", "Bearer " & API_KEY
            .Send (requestBody)
        End With


        ' Process API response
        If httpRequest.Status = 200 Then
            Dim response As String
            response = httpRequest.responseText


            Dim completion As String
            completion = ParseResponse(response)


            ' Output the completion in the same sheet
            Set outputCell = selectedRange.Cells(1).offset(selectedRange.Rows.Count + 1, 0)
            outputCell.Value = completion


            ' Store the current prompt
            previousPrompt = prompt


            ' Add the "Regenerate" button if it hasn't been added yet
            If Not regenerateButtonAdded Then
                AddRegenerateButton
                regenerateButtonAdded = True
            End If


            MsgBox "OpenAI completion request processed successfully. Result can be found below the input question.", vbInformation, "OpenAI Request Completed"
        Else
            MsgBox "Request failed with status " & httpRequest.Status & vbCrLf & vbCrLf & "ERROR MESSAGE:" & vbCrLf & httpRequest.responseText, vbCritical, "OpenAI Request Failed"
        End If
    Else
        MsgBox "Prompt has not changed. No regeneration required.", vbInformation, "Prompt Unchanged"
    End If
End Sub


Sub Regenerate_Completion()
    ' Check if outputCell is set
    If outputCell Is Nothing Then
        MsgBox "No completion output available. Run OpenAI_Completion first.", vbInformation, "No Output"
        Exit Sub
    End If


    ' Clear the previous output
    outputCell.ClearContents


    ' Reset the previous prompt
    previousPrompt = ""


    ' Run OpenAI_Completion again
    OpenAI_Completion
End Sub


Sub AddRegenerateButton()
    ' Check if the button already exists
    If Not IsEmpty(outputCell.offset(1, 0).Value) Then Exit Sub


    ' Add a button to regenerate the completion
    Dim btnRegenerate As button
    Dim btnTop As Long
    Dim btnLeft As Long
    Dim btnWidth As Long
    Dim btnHeight As Long


    ' Define the button dimensions and position
    btnWidth = 90
    btnHeight = 25
    btnLeft = outputCell.Left + (outputCell.Width - btnWidth) / 2 ' Position in the middle
    btnTop = outputCell.Top + outputCell.Height + 10


    ' Create the button
    Set btnRegenerate = ActiveSheet.Buttons.Add(btnLeft, btnTop, btnWidth, btnHeight)
    With btnRegenerate
        .Caption = "Regenerate"
        .OnAction = "Regenerate_Completion"


    End With
End Sub


' Helper function to parse the response text
Function ParseResponse(ByVal response As String) As String
    Dim startIndex As Long
    Dim endIndex As Long
    
    startIndex = InStr(response, """text"": """) + Len("""text"": """)
    endIndex = InStr(startIndex, response, """")
    
    ParseResponse = Mid(response, startIndex, endIndex - startIndex)
    ParseResponse = Replace(ParseResponse, "\n", vbCrLf) ' Replace "\n" with line breaks
    ParseResponse = Trim(ParseResponse) ' Trim leading and trailing whitespace
End Function
